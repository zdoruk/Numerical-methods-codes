#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define f(x) x * x * x - 2 * x * x + 5
#define LOWER_BOUND 0
#define UPPER_BOUND 3

double Calculate(int n, int lower_bound, int upper_bound);

int main()
{
    printf("Integral Result with Trapezium Rule =====> %lf\n", Calculate(1, LOWER_BOUND, UPPER_BOUND));
    printf("\n");
    printf("Integral Result with Simpson's Rule =====> %lf\n", Calculate(2, LOWER_BOUND, UPPER_BOUND));
    printf("\n");
    printf("Integral Result with Simpson's 3//8 Rule =====> %lf\n", Calculate(3, LOWER_BOUND, UPPER_BOUND));
    printf("\n");
    printf("Integral Result with Boole Rule =====> %lf\n", Calculate(4, LOWER_BOUND, UPPER_BOUND));
    printf("\n");

    return 0;
}

double Calculate(int n, int lower_bound, int upper_bound)
{
    double h, integralResult, x0;

    x0 = (double)lower_bound;
    h = (upper_bound - lower_bound) / n;

    if (n == 1) {
        integralResult = (h / 2) * (f(x0) + f(x0 + h));
    }else if (n == 2) {
        integralResult = (h / 3) * (f(x0) + 4 * f(x0 + h) + f(x0 + 2 * h));
    }else if (n == 3) {
        integralResult = (3 * h / 8) * (f(x0) + 3 * f(x0 + h) + 3 * f(x0 + 2 * h) + f(x0 + 3 * h));
    }else if (n == 4) {
        integralResult = (2 * h / 45) * (7 * f(x0) + 32 * f(x0 + h) + 12 * f(x0 + 2 * h) + 32 * f(x0 + 3 * h) + 7 * f(x0 + 4 * h));
    }

    return integralResult;
}
